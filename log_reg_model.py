import pandas as pd
import sklearn
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import StratifiedShuffleSplit
from sklearn.metrics import classification_report
from sklearn.preprocessing import MinMaxScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_auc_score
from sklearn.metrics import make_scorer



#data
file_name='data.csv';
data=pd.read_csv(file_name);
data=data.drop(data.columns[[0]], axis=1)#Drop fisrt column "Sr.No."

print data.corr() #Correlation

train=data.drop('label',axis=1);
target=data['label']

X=train.values;
y=target.values;
sss = StratifiedShuffleSplit(n_splits=3, test_size=0.3, random_state=0)
sss.get_n_splits(X, y);

for train_index, test_index in sss.split(X, y):
	print("TRAIN:", train_index, "TEST:", test_index)
	X_train, X_test = X[train_index], X[test_index]
	y_train, y_test = y[train_index], y[test_index]
	

scaler = MinMaxScaler();
scaler.fit(X_train);
X_train=scaler.transform(X_train);
X_test=scaler.transform(X_test);

#Logistic
print "Logistic"
lr=LogisticRegression(class_weight='balanced');
lr.fit(X_train,y_train);

#Training Accuracy
y_pred=lr.predict(X_train)

print classification_report(y_train,y_pred)
y_test_pred=lr.predict(X_test);
print "Score"
print lr.score(X_train,y_train);
print "Classification Report"
print classification_report(y_test,y_test_pred)


print "Score"
print lr.score(X_test,y_test);

def tp(y_test, y_pred): return confusion_matrix(y_test, y_pred)[0, 1]
def tn(y_test, y_pred): return confusion_matrix(y_test, y_pred)[0, 0]
def fp(y_test, y_pred): return confusion_matrix(y_test, y_pred)[1, 0]
def fn(y_test, y_pred): return confusion_matrix(y_test, y_pred)[1, 1]
scoring = {'tp' : make_scorer(tp), 'tn' : make_scorer(tn),
           'fp' : make_scorer(fp), 'fn' : make_scorer(fn)}
print "confusion matrix"
print confusion_matrix(y_test,y_test_pred)

auc=roc_auc_score(y_test, y_test_pred)

print "auc"
print auc
'''
#Univariate Logistic regression
colnames=data.columns.values.tolist()
for col in colnames:
	print col
	train=data[col];
	target=data['label']

	X=train.values;
	y=target.values;
	sss = StratifiedShuffleSplit(n_splits=3, test_size=0.3, random_state=0)
	sss.get_n_splits(X, y);

	for train_index, test_index in sss.split(X, y):
		print("TRAIN:", train_index, "TEST:", test_index)
		X_train, X_test = X[train_index], X[test_index]
		y_train, y_test = y[train_index], y[test_index]
	

	X_train=X_train.reshape(-1,1);
	X_test=X_test.reshape(-1,1);

	#Logistic
	print "Logistic"
	lr=LogisticRegression(class_weight='balanced');
	lr.fit(X_train,y_train);

	#Training Accuracy
	y_pred=lr.predict(X_train)

	print classification_report(y_train,y_pred)
	y_test_pred=lr.predict(X_test);
	print "Score"
	print lr.score(X_train,y_train);
	print "Classification Report"
	print classification_report(y_test,y_test_pred)


	print "Score"
	print lr.score(X_test,y_test);

	

'''
#Naive bayesian
print "Naive Bayesian"
gnb = GaussianNB()
nb= gnb.fit(X_train, y_train)
y_pred=nb.predict(X_train)
y_pred_test=nb.predict(X_test)

print classification_report(y_train,y_pred)
print "Score"
print nb.score(X_train,y_train);
print "Classification Report"
print classification_report(y_test,y_test_pred)
print "Score"
print nb.score(X_test,y_test);

