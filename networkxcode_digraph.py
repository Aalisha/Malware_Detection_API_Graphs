import networkx as nx
import pygraphviz as pgv
import os
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

dir=["/home/sneha/Desktop/Malware_Project/BenignDot", "/home/sneha/Desktop/Malware_Project/MalwareDot"]
graphdir="/home/sneha/Desktop/Malware_Project/DiGraph_Benign"


ext=".dot"
openfile=[]
count=0;

df=pd.DataFrame(columns=['avg_clustering','avg_shortest_path','avg_in_degree','avg_out_degree','diameter','max_ev','min_ev','avg_ev','label']);
print df
try:
    os.remove("data.csv")
except OSError:
    pass
count=0;

for resultdir in dir:
	print resultdir
	for f in os.listdir(resultdir):
		#print f
		gtmp=pgv.AGraph(directed=True)
		if resultdir==dir[0]:
			gtmp=pgv.AGraph("BenignDot"+"/"+f)
		else:
			gtmp=pgv.AGraph("MalwareDot"+"/"+f)
		G=nx.DiGraph(gtmp)
		if G.number_of_nodes()<=1:
			continue;
		else:
			diameter=0;
			avg_shortest_path=0;
			G_undirected=G.to_undirected();
			avg_clustering=nx.average_clustering(G_undirected);
			try:
				avg_shortest_path=nx.average_shortest_path_length(G);
				diameter=nx.diameter(G);
			except:
				 sp=0;
				 d=0;
				 for g in nx.connected_component_subgraphs(G_undirected): 
				 	sp=sp+nx.average_shortest_path_length(g);
					d=d+nx.diameter(g);
				 avg_shortest_path = sp/(nx.number_connected_components(g));
				 diameter=d/(nx.number_connected_components(g));
				 	
			#reciprocity=nx.overall_reciprocity(G);
			#in_degree=nx.in_degree(G);
			indegree=[]
			for x in G.in_degree():
				indegree=x[1]
		
			tot_in_degree=np.sum(indegree);
			avg_in_degree=float(tot_in_degree)/(G.number_of_nodes());

			outdegree=[]
			for x in G.out_degree():
				outdegree=x[1]
		
			tot_out_degree=np.sum(outdegree);
			avg_out_degree=float(tot_out_degree)/(G.number_of_nodes());
			'''
			L = nx.normalized_laplacian_matrix(G,directed=True)
			e = numpy.linalg.eigvals(L.A)
			'''
			e=nx.eigenvector_centrality(G,max_iter=500,tol=1e-3)
			max_ev=max(e.values())
			min_ev=min(e.values())	
			avg_ev=float(sum(e.values()))/len(e.values())	
			
			#clique_num=nx.graph_clique_number(G)

			label = 0;
			if resultdir==dir[1]:
				label=1#Is malware
			row = [avg_clustering,avg_shortest_path,avg_in_degree,avg_out_degree,diameter,max_ev,min_ev,avg_ev,label];
			df.loc[len(df)] = row;
			'''
			nx.draw(G);
			plt.savefig(graphdir+"/"+f+".png");
			'''

df.to_csv("/home/sneha/Desktop/Malware_Project/data.csv")
